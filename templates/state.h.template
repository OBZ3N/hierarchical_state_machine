
// [#template.time_and_date] : generated from '[#template.xml_input_file]'.

#pragma once

#include "hsm/schema.h"
#include "hsm/asset.h"
#include "hsm/state.h"
#include "hsm/debug.h"
#include "test/test_state_base.h"

namespace test
{
    namespace states
    {
        class [#template.state.type] : public test::StateBase
        {
        public:
            // factory.
            static const char* GetTypeName() { return "[#template.state.name]"; }
            static [#template.state.type]* Instantiate(const hsm::schema::State& schema, test::Game& game ) { return new [#template.state.type]( schema, game ); }

        public:
            [#template.state.type](StateMachine* state_machine, const hsm::schema::State& schema, test::Game& game);
            ~[#template.state.type]();

            virtual void enter() override;
            virtual void update() override;
            virtual void exit() override;

        private:

        };
    }
}